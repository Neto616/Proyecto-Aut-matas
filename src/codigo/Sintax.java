
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 06 16:55:05 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 06 16:55:05 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\004\005\000\002\004\007" +
    "\000\002\004\005\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\005\000\002" +
    "\004\005\000\002\004\007\000\002\006\006\000\002\006" +
    "\007\000\002\006\005\000\002\007\004\000\002\007\005" +
    "\000\002\010\006\000\002\010\005\000\002\011\006\000" +
    "\002\011\005\000\002\012\006\000\002\012\005\000\002" +
    "\005\010\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\005\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\006\000\002\022\010\000\002\023\003\000" +
    "\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\004\005\004\001\002\000\030\006\022\007" +
    "\027\010\025\011\011\012\024\020\030\024\010\033\017" +
    "\035\020\037\023\047\015\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\042\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\020\ufffb\021\ufffb\023\ufffb\024" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\047\ufffb\001\002\000\042\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\020\ufffc\021\ufffc\023\ufffc\024\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\047\ufffc\001" +
    "\002\000\004\047\153\001\002\000\042\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\020\ufffa\021\ufffa\023\ufffa\024" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\047\ufffa\001\002\000\030\006\152\007\027\010\025\011" +
    "\011\012\024\020\030\024\047\033\017\035\020\037\023" +
    "\047\015\001\002\000\042\006\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\012\ufffe\020\ufffe\021\ufffe\023\ufffe\024\ufffe\033\ufffe" +
    "\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\047\ufffe\001" +
    "\002\000\014\013\141\014\143\015\142\016\144\017\137" +
    "\001\002\000\042\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\020\ufffd\021\ufffd\023\ufffd\024\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\037\ufffd\040\ufffd\047\ufffd\001\002\000" +
    "\012\046\031\047\036\051\033\052\037\001\002\000\012" +
    "\046\031\047\036\051\033\052\037\001\002\000\042\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\020\ufff9\021\ufff9" +
    "\023\ufff9\024\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\047\ufff9\001\002\000\004\002\uffff\001\002" +
    "\000\004\042\115\001\002\000\004\047\106\001\002\000" +
    "\004\047\076\001\002\000\042\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\020\ufff8\021\ufff8\023\ufff8\024\ufff8\033" +
    "\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\047\ufff8" +
    "\001\002\000\004\047\067\001\002\000\012\046\031\047" +
    "\036\051\033\052\037\001\002\000\052\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\020\uffcb\021\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\041\uffcb\047\uffcb\001\002\000" +
    "\016\025\062\026\060\027\061\030\057\031\064\032\065" +
    "\001\002\000\052\007\uffd5\010\uffd5\011\uffd5\012\uffd5\020" +
    "\uffd5\021\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\041\uffd5\047\uffd5\001\002\000\052\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\020\uffca\021\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\041\uffca\047\uffca\001\002\000" +
    "\030\007\027\010\025\011\011\012\024\020\030\021\041" +
    "\024\010\033\017\035\020\037\023\047\015\001\002\000" +
    "\052\007\uffcc\010\uffcc\011\uffcc\012\uffcc\020\uffcc\021\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\041\uffcc" +
    "\047\uffcc\001\002\000\052\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\020\uffd4\021\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\041\uffd4\047\uffd4\001\002\000\030\007\027" +
    "\010\025\011\011\012\024\020\030\021\046\024\047\033" +
    "\017\035\020\037\023\047\015\001\002\000\042\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\020\uffe4\021\uffe4\023" +
    "\uffe4\024\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\047\uffe4\001\002\000\042\006\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\020\ufff3\021\ufff3\023\ufff3\024\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\047" +
    "\ufff3\001\002\000\042\006\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\020\ufff1\021\ufff1\023\ufff1\024\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\047\ufff1\001\002" +
    "\000\042\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\020" +
    "\ufff7\021\ufff7\023\ufff7\024\ufff7\033\ufff7\034\ufff7\035\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\047\ufff7\001\002\000\042\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\020\ufff6\021\ufff6" +
    "\023\ufff6\024\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\047\ufff6\001\002\000\044\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\020\uffe6\021\uffe6\022\053\023" +
    "\uffe6\024\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\040\uffe6\047\uffe6\001\002\000\042\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\020\ufff5\021\ufff5\023\ufff5\024\ufff5" +
    "\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\047" +
    "\ufff5\001\002\000\042\006\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\020\ufff2\021\ufff2\023\ufff2\024\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\047\ufff2\001\002" +
    "\000\042\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\020" +
    "\ufff4\021\ufff4\023\ufff4\024\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\047\ufff4\001\002\000\042\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\020\uffe5\021\uffe5" +
    "\023\uffe5\024\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\047\uffe5\001\002\000\030\007\027\010\025" +
    "\011\011\012\024\020\030\023\055\024\010\033\017\035" +
    "\020\037\023\047\015\001\002\000\030\007\027\010\025" +
    "\011\011\012\024\020\030\023\056\024\047\033\017\035" +
    "\020\037\023\047\015\001\002\000\042\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\020\uffe3\021\uffe3\023\uffe3\024" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\047\uffe3\001\002\000\042\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\020\uffe2\021\uffe2\023\uffe2\024\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\047\uffe2\001" +
    "\002\000\012\046\uffd0\047\uffd0\051\uffd0\052\uffd0\001\002" +
    "\000\012\046\uffd2\047\uffd2\051\uffd2\052\uffd2\001\002\000" +
    "\012\046\uffd1\047\uffd1\051\uffd1\052\uffd1\001\002\000\012" +
    "\046\uffd3\047\uffd3\051\uffd3\052\uffd3\001\002\000\012\046" +
    "\031\047\036\051\033\052\037\001\002\000\012\046\uffcf" +
    "\047\uffcf\051\uffcf\052\uffcf\001\002\000\012\046\uffce\047" +
    "\uffce\051\uffce\052\uffce\001\002\000\036\007\uffcd\010\uffcd" +
    "\011\uffcd\012\uffcd\020\uffcd\021\uffcd\024\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\041\uffcd\047\uffcd\001\002" +
    "\000\006\013\070\041\071\001\002\000\006\046\072\047" +
    "\074\001\002\000\050\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\020\ufff0\021\ufff0\023\ufff0\024\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\046\ufff0\047\ufff0" +
    "\051\ufff0\052\ufff0\001\002\000\004\041\uffc8\001\002\000" +
    "\004\041\075\001\002\000\004\041\uffc9\001\002\000\050" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\020\uffef\021" +
    "\uffef\023\uffef\024\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\046\uffef\047\uffef\051\uffef\052\uffef\001" +
    "\002\000\006\013\077\041\100\001\002\000\010\046\101" +
    "\047\104\053\103\001\002\000\050\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\020\uffe8\021\uffe8\023\uffe8\024\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\046" +
    "\uffe8\047\uffe8\051\uffe8\052\uffe8\001\002\000\016\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\041\uffc4\001\002\000" +
    "\004\041\105\001\002\000\016\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\041\uffc3\001\002\000\016\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\041\uffc5\001\002\000\050" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\020\uffe7\021" +
    "\uffe7\023\uffe7\024\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\046\uffe7\047\uffe7\051\uffe7\052\uffe7\001" +
    "\002\000\006\013\107\041\110\001\002\000\010\047\112" +
    "\051\033\052\037\001\002\000\050\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\020\uffe9\021\uffe9\023\uffe9\024\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\046" +
    "\uffe9\047\uffe9\051\uffe9\052\uffe9\001\002\000\004\041\114" +
    "\001\002\000\004\041\113\001\002\000\050\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\020\uffea\021\uffea\023\uffea" +
    "\024\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040" +
    "\uffea\046\uffea\047\uffea\051\uffea\052\uffea\001\002\000\050" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\020\uffeb\021" +
    "\uffeb\023\uffeb\024\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\046\uffeb\047\uffeb\051\uffeb\052\uffeb\001" +
    "\002\000\012\007\027\010\025\011\011\012\024\001\002" +
    "\000\030\007\027\010\025\011\011\012\024\020\030\024" +
    "\010\033\017\035\020\037\023\040\117\047\015\001\002" +
    "\000\042\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\020" +
    "\uffdc\021\uffdc\023\uffdc\024\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\047\uffdc\001\002\000\030\007" +
    "\027\010\025\011\011\012\024\020\030\024\047\033\017" +
    "\035\020\037\023\040\121\047\015\001\002\000\042\006" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\020\uffdd\021\uffdd" +
    "\023\uffdd\024\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\047\uffdd\001\002\000\012\046\031\047\036" +
    "\051\033\052\037\001\002\000\004\041\124\001\002\000" +
    "\004\047\015\001\002\000\004\043\126\001\002\000\030" +
    "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\020\uffdb\024\uffdb\033" +
    "\uffdb\035\uffdb\037\uffdb\040\uffdb\047\uffdb\001\002\000\030" +
    "\007\027\010\025\011\011\012\024\020\030\024\010\033" +
    "\017\035\020\036\130\037\023\047\015\001\002\000\042" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\020\uffde\021" +
    "\uffde\023\uffde\024\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\047\uffde\001\002\000\030\007\027\010" +
    "\025\011\011\012\024\020\030\024\047\033\017\035\020" +
    "\036\132\037\023\047\015\001\002\000\042\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\020\uffdf\021\uffdf\023\uffdf" +
    "\024\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\047\uffdf\001\002\000\030\007\027\010\025\011\011" +
    "\012\024\020\030\024\010\033\017\034\135\035\020\037" +
    "\023\047\015\001\002\000\030\007\027\010\025\011\011" +
    "\012\024\020\030\024\047\033\017\034\136\035\020\037" +
    "\023\047\015\001\002\000\042\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\047\uffe0" +
    "\001\002\000\042\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\047\uffe1\001\002\000" +
    "\010\046\uffd7\047\uffd7\053\uffd7\001\002\000\010\046\101" +
    "\047\104\053\103\001\002\000\010\046\uffd6\047\uffd6\053" +
    "\uffd6\001\002\000\010\046\uffd9\047\uffd9\053\uffd9\001\002" +
    "\000\010\046\uffda\047\uffda\053\uffda\001\002\000\010\046" +
    "\uffd8\047\uffd8\053\uffd8\001\002\000\016\013\141\014\143" +
    "\015\142\016\144\017\137\041\147\001\002\000\010\046" +
    "\101\047\104\053\103\001\002\000\044\006\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\020\uffc7\021\uffc7\023\uffc7\024" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\043\uffc7\047\uffc7\001\002\000\004\041\151\001\002\000" +
    "\044\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\020\uffc6" +
    "\021\uffc6\023\uffc6\024\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\043\uffc6\047\uffc6\001\002\000\004" +
    "\002\000\001\002\000\006\013\154\041\155\001\002\000" +
    "\006\044\157\047\156\001\002\000\050\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\012\uffee\020\uffee\021\uffee\023\uffee\024" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\046\uffee\047\uffee\051\uffee\052\uffee\001\002\000\004\041" +
    "\161\001\002\000\004\041\160\001\002\000\050\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\020\uffed\021\uffed\023" +
    "\uffed\024\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\046\uffed\047\uffed\051\uffed\052\uffed\001\002\000" +
    "\050\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\020\uffec" +
    "\021\uffec\023\uffec\024\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\046\uffec\047\uffec\051\uffec\052\uffec" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\004\002\004\001\001\000\020\003\012\004" +
    "\013\006\015\010\011\011\020\012\025\022\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\043\006\044\010\041\011\047\012\042\022\050\001" +
    "\001\000\002\001\001\000\004\014\137\001\001\000\002" +
    "\001\001\000\010\015\033\017\132\020\031\001\001\000" +
    "\010\015\033\017\126\020\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\033\017\034\020\031\001\001\000\002\001" +
    "\001\000\004\016\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\037\004\013\006\015\010\011\011" +
    "\020\012\025\022\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\043\006\044\010\041\011\047\012" +
    "\042\022\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\053\004" +
    "\013\006\015\010\011\011\020\012\025\022\006\001\001" +
    "\000\016\004\043\006\044\010\041\011\047\012\042\022" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\033\020\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\121\001\001\000\020\003\117\004\013\006\015\010" +
    "\011\011\020\012\025\022\006\001\001\000\002\001\001" +
    "\000\016\004\043\006\044\010\041\011\047\012\042\022" +
    "\050\001\001\000\002\001\001\000\010\015\033\017\122" +
    "\020\031\001\001\000\002\001\001\000\004\022\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\130" +
    "\004\013\006\015\010\011\011\020\012\025\022\006\001" +
    "\001\000\002\001\001\000\016\004\043\006\044\010\041" +
    "\011\047\012\042\022\050\001\001\000\002\001\001\000" +
    "\020\003\133\004\013\006\015\010\011\011\020\012\025" +
    "\022\006\001\001\000\016\004\043\006\044\010\041\011" +
    "\047\012\042\022\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\145\001\001\000\004\023\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VD ::= NUMDECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VD",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VD ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VD",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VD ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VD",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Mat ::= Identificador OpAtribucion VD OpAtribucion VD PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Mat",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Mat ::= Identificador OpAtribucion VD PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Mat",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VM ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VM ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VCon ::= Estado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VCon",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VCon ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VCon",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VCon ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VCon",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Condicion ::= VCon OpLog VCon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condicion",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OpLog ::= MenorIgualQue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OpLog",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OpLog ::= MayorIgualQue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OpLog",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OpLog ::= DiferenteQue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OpLog",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OpLog ::= IgualQue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OpLog",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OpLog ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OpLog",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OpLog ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OpLog",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Estado ::= RFalse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Estado",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Estado ::= RTrue 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Estado",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OpAtribucion ::= SignoIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OpAtribucion",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OpAtribucion ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OpAtribucion",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OpAtribucion ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OpAtribucion",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OpAtribucion ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OpAtribucion",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OpAtribucion ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OpAtribucion",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_FOR ::= AbreParentesis DECLARACION Condicion PuntoComa Mat CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FOR ::= InicioFor DECLARACION_FOR FinFor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FOR ::= InicioFor DECLARACION_FOR SENTENCIA FinFor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DO_WHILE ::= InicioDoWhile Condicion FinDoWhile 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DO_WHILE ::= InicioDoWhile Condicion SENTENCIA FinDoWhile 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // WHILE ::= InicioWhile Condicion FinWhile 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // WHILE ::= InicioWhile Condicion SENTENCIA FinWhile 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELSE ::= Else SENTENCIA FinElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELSE ::= Else FinElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= InicioIf Condicion FinIf 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IF ::= InicioIf Condicion SENTENCIA FinIf ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IF ::= InicioIf Condicion SENTENCIA FinIf 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= TipoDecimal Identificador SignoIgual VD PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= TipoDecimal Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= TipoBooleano Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= TipoBooleano Identificador SignoIgual Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= TipoBooleano Identificador SignoIgual Estado PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= TipoCadena Identificador SignoIgual Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= TipoCadena Identificador SignoIgual CadenaDeTexto PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= TipoCadena Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= TipoEntero Identificador SignoIgual VM PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= TipoEntero Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA Mat 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA Comentario 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= Mat 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= Comentario 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= InicioPrograma FinPrograma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= InicioPrograma SENTENCIA FinPrograma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

